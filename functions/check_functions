#!/bin/bash

# Check dpkg for package installation status
check_package_installed() {
	# query dpkg for install status and return a value
	dpkg-query -W --showformat='${Status}\n' $@ | grep "install ok installed" &> /dev/null; echo $?
}

# Check for Flatpak repository
# ${1} = remote, ${2} = https://remote.example.com/
check_flatpak_repo() {
	# echo_message header "Starting 'check_flatpak_repo' function"
	# If repo not is added
	if [ $(flatpak remotes | grep ${1} &> /dev/null; echo $?) = 1 ]; then
		echo_message info "Adding flatpak '${2}' repository..."
		flatpak remote-add --if-not-exists ${1} ${2}
		echo_message success "Repository added."
	else
		echo_message info "${1} repository already exists."
	fi
}

# Check which distribution the user is running
check_os() {
	echo_message header "Starting 'check_os' function"
	echo_message title "Checking which OS you are using..."
	os_name="Linux"
	# Check if Linux
	echo_message info "Current OS is: "$(uname)
	if [[ $(uname) != "$os_name" ]]; then
		echo_message error "You don't appear to be using $os_name! Aborting. :("
		exit 99
	else
		echo_message success "You are using '$os_name'. :D"
	fi
}

# Check which distribution the user is running
check_distribution() {
	# check if 'lsb_release' exists
	if [[ $(which lsb_release &>/dev/null; echo $?) != 0 ]]; then
		echo_message error "\aCan't check which distribution you are using! Aborting."
		echo_message error " Aborting..." && sleep 3 && exit 99
	else
		if lsb_release -ds | grep -qE '(Ubuntu)'; then
			echo_message info 'Current distribution is: '$(lsb_release -ds)
			echo_message success "You are using Ubuntu. :D"
			echo_message info "Proceeding."
		elif lsb_release -ds | grep -qE '(Pop!_OS)'; then
			echo_message info 'Current distribution is: '$(lsb_release -ds)
			echo_message success "You are using an Ubuntu-based distribution. It's probably fine. :)"
			echo_message info "Proceeding."
		elif lsb_release -ds | grep -qE '(Mint|elementary)'; then
			echo_message info 'Current distribution is: '$(lsb_release -ds)
			echo_message success "You are using an Ubuntu-based distribution. It's probably fine. :)"
			echo_message info "Proceeding."
		elif lsb_release -ds | grep -q 'Debian'; then
			echo_message info 'Current distribution is: '$(lsb_release -ds)
			echo_message warning "You are using Debian. This is not recommended. Some functions may not work. :/"
			echo_message info "Proceeding nonetheless."
		else
			echo_message warning "You are using a distribution that may not be compatible with this script set."
			echo_message warning "Proceeding may break your system."
			echo_message question "Are you sure you want to continue? (Y)es, (N)o : " && read reply
			case $reply in
			[Yy]* )
				echo_message warning "You have been warned."
				;;
			[Nn]* )
				echo_message info "Exiting..."
				exit 99
				;;
			* )
				echo_message error 'Sorry, try again.' && check_distribution
				;;
			esac
		fi
	fi
}

# Check for and install if missing the required packages for this script set.
check_dependencies() {
	echo_message header "Starting 'check_dependencies' function"
	echo_message title "Checking if necessary dependencies are installed..."
	# Variables
	list="${data_dir}/dependencies.list"
	# Check dependencies
	for package in $(cat $list); do
		# skip commented lines.
		[[ $package = \#* ]] && continue
		# If package is not installed
		if [ $(check_package_installed $package) != 0 ]; then
			echo_message info "This script requires '$package' and it is not present on your system."
			echo_message question 'Would you like to install it to continue? (Y)es, (N)o : ' && read reply
			case $reply in
			[Yy]* ) 
				echo_message warning "Requires root privileges"
				sudo apt install -y $package
				echo_message success "Package '$package' installed."
				;;
			[Nn]* )
				echo_message info "Exiting..."
				exit 99
				;;
			* )
				echo_message error 'Sorry, try again.' && check_dependencies
				;;
			esac
		else
			echo_message info "Dependency '$package' already exists."
		fi
	done
	echo_message success "All dependencies are installed. :)"
}

# Check if current user is in the sudo group
check_privileges() {
	echo_message header "Starting 'check_privileges' function"
	echo_message title "Checking administrative privileges of current user..."
	# Check if user is root
	if [[ $EUID != 0 ]]; then
		if [[ $(groups $USER | grep -q 'sudo'; echo $?) != 0 ]]; then
			echo_message error "This user account doesn't have admin privileges."
			echo_message info "Log in as a user with admin privileges to be able to much of these scripts.."
			echo_message info "Exiting..."
			sleep 5 && exit 99
		else
			echo_message success "Current user has sudo privileges. :)"
		fi
	else
		echo_message warning "You are logged in as the root user. This is not recommended. :/"
		read -p "Are you sure you want to proceed? [y/N] " reply
		reply=${reply:-n}
		case $reply in
		[Yy]* )
			echo_message info "Proceeding..."
			;;
		[Nn]* )
			echo_message info "Exiting..."
			exit 99
			;;
		* )
			echo_message error 'Sorry, try again.' && check_privileges
			;;
		esac
	fi
}

# Run system checks
system_checks() {
	check_os
	check_distribution
	check_privileges
	check_dependencies
}